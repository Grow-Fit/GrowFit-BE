name: Deploy To EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      # GitHub Actions VM 환경의 IP를 받아온다.
      - name: Get Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: JDK 21버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21


      - name: application.yml 파일 만들기
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
          find src

      - name: application-prod.yml 파일 만들기
        run: |
          echo "${{ secrets.APPLICATION_PROD_YML }}" | base64 --decode > src/main/resources/application-prod.yml
          find src

      - name: application-cloud.yml 파일 만들기
        run: |
          echo "${{ secrets.APPLICATION_CLOUD_YML }}" | base64 --decode > src/main/resources/application-cloud.yml
          find src

      - name: application-oauth2.yml 파일 만들기
        run: |
          echo "${{ secrets.APPLICATION_OAUTH2_YML }}" | base64 --decode > src/main/resources/application-oauth2.yml
          find src

      - name: gradlew에 실행 권한 추가
        run: chmod +x ./gradlew

      - name: 테스트 및 빌드하기 (현재는 테스트 제외하고 빌드하기)
        #run: ./gradlew clean build
        run: ./gradlew clean build -x test

      - name: DockerHub 에 로그인하기
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 생성
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/growfit-server:latest .

      - name: Docker 이미지 Push하기
        run: docker push ${{ secrets.DOCKER_USERNAME }}/growfit-server:latest

      # AWS 인증 관련 옵션을 추가한다.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-2'

      # GitHub Actions VM 환경의 IP를 인바운드 규칙에 추가한다.
      - name: Add GitHub Actions IP
        run: |
          aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            # Docker Compose 실행
            docker rm -f redis || true # redis 컨테이너가 있을 경우 강제 삭제 (없으면 무시)
            sudo docker-compose -f /home/ubuntu/docker-compose.yml down
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/growfit-server:latest
            sudo docker-compose -f /home/ubuntu/docker-compose.yml up -d

      # GitHub Actions VM 환경의 IP를 인바운드 규칙에서 제거한다.
      - name: Remove GitHub Actions IP
        run: |
          aws ec2 revoke-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32
